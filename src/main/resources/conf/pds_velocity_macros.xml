## Copyright 2020, California Institute of Technology ("Caltech").
## U.S. Government sponsorship acknowledged.
##
## All rights reserved.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted provided that the following conditions are met:
##
## * Redistributions of source code must retain the above copyright notice,
## this list of conditions and the following disclaimer.
## * Redistributions must reproduce the above copyright notice, this list of
## conditions and the following disclaimer in the documentation and/or other
## materials provided with the distribution.
## * Neither the name of Caltech nor its operating division, the Jet Propulsion
## Laboratory, nor the names of its contributors may be used to endorse or
## promote products derived from this software without specific prior written
## permission.
##
## THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
## AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
## IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
## ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
## LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
## CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
## SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
## INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
## CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
## ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
## POSSIBILITY OF SUCH DAMAGE.
##
## This template is made up of usable macros for PDS4 Velocity Templates.
## This file must be placed in the same directory as the Velocity Templates
## to be used, otherwise the VelocityEngine will not be able to find it.
##
## To include this file in your template and use the macros, add the following
## at the top of your Velocity template:
##
##		#parse ( "pds_velocity_macros.vm" )
##


#################################
## PDS3 to PDS4 Data Type Mapping
## 
## This macro will return a PDS4 data type based on a PDS3 data type
## More specifically, this macro provides a mapping from the PDS3 Keywords
## DATA_TYPE, SAMPLE_TYPE, among others, to PDS4 data_type attribute in
## accordance with the number of BITS for the data_type (i.e. SAMPLE_BITS).
## The values in PDS4 are based on PDS SCH 1.4.0.0

## The following mappings are TBD
##	"ComplexLSB16",
##	"ComplexLSB8",
##	"ComplexMSB16",
##	"ComplexMSB8",
##	"IEEE754LSBDouble",
##	"IEEE754LSBSingle",
##	"IEEE754MSBDouble",
##	"IEEE754MSBSingle",
##	"SignedBitString",
##	"SignedByte",
##	"UnsignedBitString",
##	"UnsignedByte",
#set ($PDS3_PDS4_DTYPE_MAP = {
	"LSB_SIGNED_INTEGER" : "SignedLSB",
	"MSB_SIGNED_INTEGER" : "SignedMSB",
	"LSB_UNSIGNED_INTEGER" : "UnsignedLSB",
	"MSB_UNSIGNED_INTEGER" : "UnsignedMSB"
})
#macro(getPds4DataType $pds3_dtype $bits)
#if ( $bits == 16 )
$PDS3_PDS4_DTYPE_MAP.get($pds3_dtype)2##
#elseif( $bits == 32 )
$PDS3_PDS4_DTYPE_MAP.get($pds3_dtype)4##
#elseif( $bit == 64 )
$PDS3_PDS4_DTYPE_MAP.get($pds3_dtype)8##
#end
#end
#################################

#################################
## PDS3 Bit Mask Trimmer
##
## In PDS3, the value for BIT_MASK and SAMPLE_BIT_MASK look like the following:
## 		SAMPLE_BIT_MASK              = 2#0000111111111111#
##
## In PDS4, these values should be just the binary portion "0000111111111111"
##
## This macro extracts the binary portion of the bit mask string. Dependent on the
## the number of bits for the array/sample/object.
##
#macro(trimBitMask $bit_mask $bits_str)
$bit_mask.substring(2,$convert.toInteger($bits_str))##
#end
#################################

##################################
## PDS4 Target vs. Target Type Mapping
##
## These are explicit mappings between target names and target types
## These may need to be applied at a mission-specific level, but for now
## will just leave in here.
##
##
#set ($TARGET_MAP = {
  "ALTAIR" : "Star",
  "APXSSITE" : "Equipment",
  "ARCTURUS" : "Star",
  "CALIMG" : "Calibration",
  "DEIMOS" : "Satellite",
  "LANDER" : "Equipment",
  "MAG" : "Equipment",
  "MARS" : "Planet",
  "PHOBOS" : "Satellite",
  "ROVER" : "Equipment",
  "SKY" : "Calibration",
  "SUN" : "Sun",
  "VEGA" : "Star",
  "WINDSOCK" : "Equipment"
})
#macro(getTargetType $target)
$TARGET_MAP.get($target)##
#end
##################################

##################################
## Check Null
##
## Simple macro that checks if value is equal to "NULL" string
## and if so, returns default value given as second argument
##
#macro(checkNull $value $default)
#if ( $value.equals("null") )
$default##
#else
$value##
#end
#end